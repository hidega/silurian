openssl req -newkey rsa:2048 -new -nodes -keyout key.pem -out csr.pem

challenge password: Password123

openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem

country code: HU
fqdn or name: Andras Hideg
state: Budapest
country: Budapest
email: hideg@caesar.elte.hu
company, divsion: .

--------------------------------------------------------------------------------------------

SSL has been around for long enough you'd think that there would be agreed upon container formats. 
And you're right, there are. Too many standards as it happens. So this is what I know, and I'm sure 
others will chime in.

.csr 
This is a Certificate Signing Request. Some applications can generate these for submission to 
certificate-authorities. The actual format is PKCS10 which is defined in RFC 2986. 
It includes some/all of the key details of the requested certificate such as subject, organization, 
state, whatnot, as well as the public key of the certificate to get signed. These get signed by the 
CA and a certificate is returned. The returned certificate is the public certificate (which includes 
the public key but not the private key), which itself can be in a couple of formats.

.pem 
Defined in RFC's 1421 through 1424, this is a container format that may include just the public 
certificate (such as with Apache installs, and CA certificate files /etc/ssl/certs), or may include 
an entire certificate chain including public key, private key, and root certificates. Confusingly, 
it may also encode a CSR (e.g. as used here) as the PKCS10 format can be translated into PEM.
The name is from Privacy Enhanced Mail (PEM), a failed method for secure email but the container 
format it used lives on, and is a base64 translation of the x509 ASN.1 keys.

.key 
This is a PEM formatted file containing just the private-key of a specific certificate and is merely 
a conventional name and not a standardized one. In Apache installs, this frequently resides in 
/etc/ssl/private. The rights on these files are very important, and some programs will refuse to 
load these certificates if they are set wrong.

.pkcs12 .pfx .p12 
Originally defined by RSA in the Public-Key Cryptography Standards, the "12" variant was enhanced 
by Microsoft. This is a passworded container format that contains both public and private certificate 
pairs. Unlike .pem files, this container is fully encrypted. Openssl can turn this into a .pem file 
with both public and private keys: openssl pkcs12 -in file-to-convert.p12 -out converted-file.pem -nodes

A few other formats that show up from time to time:

.der 
A way to encode ASN.1 syntax in binary, a .pem file is just a Base64 encoded .der file. 
OpenSSL can convert these to .pem (openssl x509 -inform der -in to-convert.der -out converted.pem). 
Windows sees these as Certificate files. By default, Windows will export certificates as .DER formatted 
files with a different extension. Like...

.cert .cer .crt 
A .pem (or rarely .der) formatted file with a different extension, one that is recognized by 
Windows Explorer as a certificate, which .pem is not.

.p7b 
Defined in RFC 2315, this is a format used by windows for certificate interchange. 
Java understands these natively. Unlike .pem style certificates, this format has a defined way to 
include certification-path certificates.

.crl A certificate revocation list. Certificate Authorities produce these as a way to de-authorize 
certificates before expiration. You can sometimes download them from CA websites.

In summary, there are four different ways to present certificates and their components:

PEM 
Governed by RFCs, it's used preferentially by open-source software. It can have a variety of 
extensions (.pem, .key, .cer, .cert, more)

PKCS7 
An open standard used by Java and supported by Windows. Does not contain private key material.

PKCS12 
A private standard that provides enhanced security versus the plain-text PEM format. 
This can contain private key material. It's used preferentially by Windows systems, and can be 
freely converted to PEM format through use of openssl.

DER 
The parent format of PEM. It's useful to think of it as a binary version of the base64-encoded 
PEM file. Not routinely used by much outside of Windows.

------------------------------------------------------------------------------------------------------------

https://www.akadia.com/services/ssh_test_certificate.html

openssl genrsa -des3 -out server.key 1024

server private key pwd: Pass1234

export OPENSSL_CONF=/usr/lib/ssl/openssl.cnf
openssl req -new -key server.key -out server.csr

Country Name (2 letter code) [AU]:HU
State or Province Name (full name) [Some-State]:Budapest
Locality Name (eg, city) []:Budapest
Organization Name (eg, company) [Internet Widgits Pty Ltd]:TransCRTL Kft.
Organizational Unit Name (eg, section) []:Information Technology
Common Name (e.g. server FQDN or YOUR name) []:transctrl.hu
Email Address []:info@transctrl.hu

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:


cp server.key server.key.org
openssl rsa -in server.key.org -out server.key

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt


# openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -name server -CAfile server.crt -caname root

keytool -genkey -alias server -keystore server.jks
keytool -delete -alias server -keystore server.jks

# keytool -importkeystore -destkeystore server.jks -srckeystore server.p12 -srcstoretype PKCS12 -alias server
# keytool -importkeystore -deststorepass Pass1234 -destkeypass Pass1234 -destkeystore server.jks -srckeystore server.p12 -srcstoretype PKCS12 -srcstorepass Pass1234 -alias default



mindehol minden password Pass1234
